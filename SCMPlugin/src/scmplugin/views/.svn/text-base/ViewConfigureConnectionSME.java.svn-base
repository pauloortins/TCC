package scmplugin.views;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

import javax.print.attribute.standard.Fidelity;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IMenuListener;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.DoubleClickEvent;
import org.eclipse.jface.viewers.IDoubleClickListener;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerSorter;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.IWorkbenchActionConstants;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;

import scmaccess.model.SCM;
import scmaccess.model.SubVersion;
import scmaccess.model.exceptions.SCMConnectionRefusedException;
import scmaccess.model.objects.InfoSCM;
import scmaccess.view.ViewEditingSme;
import scmaccess.view.ViewSelectVersions;
import scmplugin.persistence.InfoScmDao;
import scmplugin.wizard.SmeWizard;

/**
 * This sample class demonstrates how to plug-in a new workbench view. The view
 * shows data obtained from the model. The sample creates a dummy model on the
 * fly, but a real implementation would connect to the model available either in
 * this or another plug-in (e.g. the workspace). The view is connected to the
 * model usinglastWizardPage a content provider.
 * <p>
 * The view uses a label provider to define how model objects should be
 * presented in the view. Each view can present the same model objects using
 * different labels and icons, if needed. Alternatively, a single label provider
 * can be shared between views in order to ensure that objects of the same type
 * are presented in the same way everywhere.
 * <p>
 */

public class ViewConfigureConnectionSME extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "scmplugin.views.ViewConfigureConnectionSME";

	private TableViewer viewer;
	private Action actionNewSME;
	private Action actionDeleteSME;
	private Action doubleClickAction;

	/*
	 * The content provider class is responsible for providing objects to the
	 * view. It can wrap existing objects in adapters or simply return objects
	 * as-is. These objects may be sensitive to the current input of the view,
	 * or ignore it and always show the same content (like Task List, for
	 * example).
	 */

	class ViewContentProvider implements IStructuredContentProvider {
		public void inputChanged(Viewer v, Object oldInput, Object newInput) {
		}

		public void dispose() {
		}

		public Object[] getElements(Object parent) {
			InfoScmDao infoDao;
			infoDao = new InfoScmDao();
			return infoDao.getAllInfoScm().toArray();
		}
	}

	class ViewLabelProvider extends LabelProvider implements
			ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			InfoSCM info = (InfoSCM) obj;
			switch (index) {
			case 0:
				return info.getSme().getName();
			case 1:
				return info.getSCScmType();
			default:
				return "?";
			}
		}

		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}

		public Image getImage(Object obj) {
			return PlatformUI.getWorkbench().getSharedImages().getImage(
					ISharedImages.IMG_OBJ_ELEMENT);
		}
	}

	class NameSorter extends ViewerSorter {
	}

	/**
	 * The constructor.
	 */
	public ViewConfigureConnectionSME() {
	}

	/**
	 * This is a callback that will allow us to create the viewer and initialize
	 * it.
	 */
	public void createPartControl(Composite parent) {
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL
				| SWT.V_SCROLL);
		createColumns(parent, viewer);
		final Table table = viewer.getTable();
		table.setHeaderVisible(true);
		table.setLinesVisible(true);

		viewer.setContentProvider(new ViewContentProvider());
		viewer.setLabelProvider(new ViewLabelProvider());
		viewer.setSorter(new NameSorter());
		viewer.setInput(getViewSite());

		// Create the help context id for the viewer's control
		PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(),
				"SCMPlugin.viewer");
		makeActions();
		hookContextMenu();
		hookDoubleClickAction();
		contributeToActionBars();
	}

	private void createColumns(final Composite parent, final TableViewer table) {
		String[] titles = { "Name", "SCM Type" };
		int[] bounds = { 350, 100 };
		@SuppressWarnings("unused")
		TableViewerColumn column = createTableViewer(titles[0], bounds[0], 0);
		column = createTableViewer(titles[1], bounds[1], 1);
	}

	private TableViewerColumn createTableViewer(String title, int bound,
			final int colNumber) {
		final TableViewerColumn viewerColumn = new TableViewerColumn(viewer,
				SWT.NONE);
		final TableColumn column = viewerColumn.getColumn();
		column.setText(title);
		column.setWidth(bound);
		column.setResizable(true);
		column.setMoveable(true);
		return viewerColumn;
	}

	private void hookContextMenu() {
		MenuManager menuMgr = new MenuManager("#PopupMenu");
		menuMgr.setRemoveAllWhenShown(true);
		menuMgr.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager manager) {
				ViewConfigureConnectionSME.this.fillContextMenu(manager);
			}
		});
		Menu menu = menuMgr.createContextMenu(viewer.getControl());
		viewer.getControl().setMenu(menu);
		getSite().registerContextMenu(menuMgr, viewer);
	}

	private void contributeToActionBars() {
		IActionBars bars = getViewSite().getActionBars();
		fillLocalPullDown(bars.getMenuManager());
		fillLocalToolBar(bars.getToolBarManager());
	}

	private void fillLocalPullDown(IMenuManager manager) {
		//manager.add(actionNewSME);
		//manager.add(actionDeleteSME);
	}

	private void fillContextMenu(IMenuManager manager) {
		manager.add(actionNewSME);
		manager.add(actionDeleteSME);
		// Other plug-ins can contribute there actions here
		manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
	}

	private void fillLocalToolBar(IToolBarManager manager) {
		//manager.add(actionNewSME);
		//manager.add(actionDeleteSME);
	}

	private void makeActions() {
		actionNewSME = new Action() {
			public void run() {
				createWizard();
			}
		};
		actionNewSME.setText("New SME");
		actionNewSME.setToolTipText("Configure a new SME");
		actionNewSME.setImageDescriptor(PlatformUI.getWorkbench()
				.getSharedImages().getImageDescriptor(
						ISharedImages.IMG_OBJS_INFO_TSK));
		
		actionDeleteSME = new Action() {
			public void run()
			{
				ISelection selection = viewer.getSelection();
				Object obj = ((IStructuredSelection) selection)
						.getFirstElement();
				final InfoSCM infoSCM = (InfoSCM) obj;
				
				try {
					new InfoScmDao().delete(infoSCM);
					viewer.refresh();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		};
		
		actionDeleteSME.setText("Delete SME");
		actionDeleteSME.setToolTipText("Delete the SME");
		actionDeleteSME.setImageDescriptor(PlatformUI.getWorkbench()
				.getSharedImages().getImageDescriptor(
						ISharedImages.IMG_OBJS_INFO_TSK));

		doubleClickAction = new Action() {
			public void run() {
				ISelection selection = viewer.getSelection();
				Object obj = ((IStructuredSelection) selection)
						.getFirstElement();
				final InfoSCM infoSCM = (InfoSCM) obj;
				final SCM scm = new SubVersion();
				try {
					ProgressMonitorDialog dialog = new ProgressMonitorDialog(new Shell(Display.getCurrent()));
					dialog.run(true, true, new IRunnableWithProgress(){
					    public void run(IProgressMonitor monitor) {
					        monitor.beginTask("Connecting to Repository ...", 100);
					        // execute the task ...
					        try {
								scm.connect(infoSCM.getUrl(), infoSCM.getUser(), infoSCM.getPassword());
							} catch (SCMConnectionRefusedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					        
					        monitor.done();
					    }
					});
					
					new ViewSelectVersions(scm).show();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
//				openEditingShell((InfoSCM) obj,viewer);
			}
		};
	}

	private void hookDoubleClickAction() {
		viewer.addDoubleClickListener(new IDoubleClickListener() {
			public void doubleClick(DoubleClickEvent event) {
				doubleClickAction.run();
			}
		});
	}

	private void openEditingShell(InfoSCM info, TableViewer viewer) {
		ViewEditingSme smeEdit = new ViewEditingSme(Display.getCurrent(),info, viewer);
		smeEdit.show();
	}
	
/*
	private void showMessage(String message) {
		MessageDialog.openInformation(viewer.getControl().getShell(),
				"Configure Connection", message);
	}
	*/

	private void createWizard() {
		// Viewer Reference pass for Wizard.
		SmeWizard smeWizard = new SmeWizard(viewer);
		Shell tela = new Shell(Display.getCurrent());
		tela.setText("SME Wizard");
		WizardDialog smeConf = new WizardDialog(tela, smeWizard);
		smeConf.open();
		//tela.dispose();
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}
}